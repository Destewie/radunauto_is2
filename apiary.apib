FORMAT: 1A
HOST: https://radunauto.herokuapp.com

# radunauto

API per visualizzare, creare e gestire i raduni d'auto d'epoca.


## New User [/api/users]

### Create a New User [POST]

Crea un nuovo utente nel sistema.

+ Request (application/json)

        {
            "username": "username",
            "password": "password",
            "email": "email",
            "display_name": "user",
            "birth_date": "2000-11-25",
            "address": "Via Roma 3",
            "phone_number": "0123456789",
            "fiscal_code": "DSNFRC00S42K234I"
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/users

    + Body

            {
                "success": true,
                "message": "User saved successfully"
            }

+ Response 400 (application/json)

    + Headers

            Location: /api/users

    + Body

            {
                "success": false,
                "message": "L'username è già usato o hai lasciato qualche campo vuoto"
            }
            

## Get user [/api/users/user{?user}]

### Get information regarding a specific user [GET]
Se non viene specificato il nome di un utente all'interno dei parametri, allora vengono tornate le info dell'utente attuale

+ Response 200 (application/json)

            {
                "display_name": "user",
                "username": "username",
                "email": "email",
                "img": ...
            }



## Modify user [/api/users/update]

### Modify an existing user [POST]

Modifica un utente già esistente nel sistema.

+ Request (application/json)

        {
            "display_name": "nome cognome",
            "birth_date": "2000-11-25",
            "address": "Via Roma 3",
            "phone_number": "0123456789",
            "img": ...
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/users/update

    + Body

            {
                "success": true,
                "message": "utente aggiornato"
            }
            
+ Response 500 (application/json)

    + Body

            {
                "success": false,
                "message": "Errore"
            }


            
            
## Login [/api/login]

### Login [POST]

Verifica username e password inseriti e fa accedere l'utente al sito.

+ Request (application/json)

        {
            "username": "username",
            "password": "password"
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/login

    + Body

            {
                "success": true,
                "username": "username",
                "message": "Adesso che sei loggato, goditi il token!",
                "token": "fkdsjahfjk-gèùàa'ìèd0f9484%$£234fewkajsf!£flk"
            }
            

## Logout [/api/logout]

### Logout [POST]

Revoca il token di accesso all'utente.

+ Request (application/json)

        {
            "cookie": "cookie"
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/login

    + Body

            {
                "success": true,
                "message": "Logout avvenuto con successo"
            }
            

## Clubs [/api/clubs]

### List Clubs [GET]

Se non viene specificato un particolare proprietario, ritorna la lista di tutti i club.

+ Response 200 (application/json)

        [
            {
                "name": "name",
                "owner": "owner"
                "subscribers": ["des", "davide", "stella"]
            }
        ]

### Create a new club [POST]

Crea un nuovo club.

+ Request (application/json)

        {
            "name": "name",
            "description": "description",
            "owner": "owner",
            "subscribers": ["username"]
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/clubs

    + Body

            {
                "success": true,
                "message": "Club successfully created"
            }
            
+ Response 400 (application/json)

    + Body

            {
                "success": false,
                "message": "Nome non valido o club già esistente"
            }
            
## Get specific club [/api/clubs/getClub{?name}]
### Get club by name  [GET]
Restituisce le informazioni di un determinato club. <br><br>
Il parametro "name" è obbligatorio. <br>
In caso contrario non trova il club.

+ Response 200 (application/json)

            {
                "name": "name",
                "owner": "owner"
                "subscribers": ["des", "davide", "stella"]
            }

+ Response 400 (application/json)

            {
                "Club non trovato"
            }

## Get banditi [/api/clubs/banditi{?name}]
### Get club's banned users  [GET]
Restituisce alcune info di un determinato club assieme alla lista degli utenti bannati dal club stesso. <br><br>
Il parametro "name" è obbligatorio.<br>
In caso contrario non trova il club.

+ Response 200 (application/json)

            {
                "success": true,
                "owner": "owner",
                "nomeClub": "nome",
                "banditi": ["davide", "stella"]
            }

+ Response 400 (application/json)

            {
                "success": "false",
                "message": "Club non trovato"
            }

## Get subscribers [/api/clubs/subscribers{?name}]
### Get club's subscribers  [GET]
Restituisce alcune info di un determinato club assieme alla lista degli utenti iscritti. <br><br>
Il parametro "name" è obbligatorio. <br>
In caso contrario non trova il club.

+ Response 200 (application/json)

            {
                "success": true,
                "owner": "owner"
                "nomeClub": "name",
                "subscribers": ["des", "davide", "stella"]
            }

+ Response 400 (application/json)

            {
                "Club non trovato"
            }
            
## Add club subscriber [/api/clubs/add_subscriber]
### Add club subscriber [POST]

Aggiunge l'utente chiamante alla lista di iscritti del club.

+ Request (application/json)

        {
            "name": "nomeClub"
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/clubs

    + Body

            {
                "success": true,
                "message": "Club modificato"
            }
            
+ Response 400 (application/json)

    + Body

            {
                "success": false,
                "message": "Spiazze, ma l'utente che volevi aggiungere è già tra gli iscritti del club"
            }

            
+ Response 403 (application/json)

    + Body

            {
                "success": false,
                "message": "Spiazze, ma l'utente che volevi aggiungere è bannato dal club"
            }

## Ban subscriber [/api/clubs/remove_subscriber]
### Remove club subscriber [POST]

Aggiunge un utente alla lista degli utenti banditi dal club.

+ Request (application/json)

        {
            "nomeUtente": "username",
            "nomeClub": "nomeClub"
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/clubs

    + Body

            {
                "success": true,
                "message": "Utente rimosso definitivamente dal club"
            }
            
+ Response 400 (application/json)

    + Body

            {
                "success": false,
                "message": "Problemi con l'eliminazione dell'utente"
            }

            
+ Response 404 (application/json)

    + Body

            {
                "success": false,
                "message": "Utente o club non trovato"
            }
            
+ Response 500 (application/json)

    + Body

            {
                "success": false,
                "message": "Errore nell'aggiornamento del club"
            }

## Remove banned subscriber [/api/clubs/remove_ban]
### Remove a banned subscriber from the ban list [POST]
Toglie l'utente dalla lista degli utenti bannati da quel club

+ Request (application/json)

        {
            "nomeUtente": "username",
            "nomeClub": "nomeClub"
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/clubs

    + Body

            {
                "success": true,
                "message": "Utente sbannato"
            }
            
+ Response 400 (application/json)

    + Body

            {
                "success": false,
                "message": "Non puoi togliere il ban ad un utente non bannato"
            }

            
+ Response 403 (application/json)

    + Body

            {
                "success": false,
                "message": "Non puoi sbannare qualcuno da un club non tuo"
            }

+ Response 404 (application/json)

    + Body

            {
                "success": false,
                "message": "Club non trovatoAggiu"
            }

                       

## Raduni [/api/raduni]

### Create a new event [POST]

Crea un nuovo raduno.

+ Request (application/json)

        {   
            "title": "title",
            "club": "club",
            "description": "description",
            "datetime": "2022-06-16T06:43"
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/raduni     

    + Body

            {
                "success": true,
                "message": "Event successfully created"
            }
            
+ Response 400 (application/json)

            {
                "success": true,
                "message": "Informazioni per la creazione del raduno errate"
            }


            
### List raduni [GET]

Se non viene specificato un particolare organizzatore, ritorna la lista di tutti i raduni.


+ Response 200 (application/json)

            [
                {
                    "title": "title",
                    "club": "club",
                    "manager": "username",
                    "datetime": "2022-06-16T06:43",
                    "description": "description",
                    "subscribers": [subs]
                }
            ]
            
            
## Get raduno's subscribers [/api/raduni/subscribers{?titoloRaduno}]
### Raduno's subs [GET]

Ritorna gli iscritti ad un particolare raduno (è obbligatorio che il nome sia passato tra i params)

+ Response 200 (application/json)

            {
                "success": true,
                "owner": "owner"
                "nomeClub": "name",
                "subscribers": ["des", "davide", "stella"]
            }

+ Response 400 (application/json)

            {
                "success": false,
                "message": "Nessun club specificato nei parametri della URL"
            }
            
+ Response 403 (application/json)

            {
                "success": false,
                "message": "Non sei autorizzato a vedere gli iscritti a questo raduno"
            }
            
+ Response 404 (application/json)

            {
                "success": false,
                "message": "Raduno non trovato"
            }

## Add raduno subscriber [/api/raduni/add_subscriber]
### Add raduno's subscriber [POST]

Aggiunge l'utente chiamante alla lista di iscritti del raduno.

+ Request (application/json)

        {
            "title": "titoloRaduno"
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/clubs

    + Body

            {
                "success": true,
                "message": "Raduno modificato"
            }
            
+ Response 400 (application/json)

    + Body

            {
                "success": false,
                "message": "Spiazze, ma l'utente che volevi aggiungere è già tra gli iscritti del raduno"
            }

            
+ Response 404 (application/json)

    + Body

            {
                "success": false,
                "message": "Raduno non trovato"
            }
            
## Cars [/api/cars{?owner}]

### List Cars [GET]

Ritorna le macchine di un particolare utente

+ Response 200 (application/json)

        [
            {
                "name": "carName",
                "manufacturer": "manifattore",
                "model": "modello",
                "year": "2000",
                "image": img
            }
        ]

+ Response 404 (application/json)

        {
            "Auto non trovate"
        }


### Add a new car [POST]

Aggiunge una nuova auto

+ Request (application/json)

        {
            "name": "carName",
            "owner": "proprietario",
            "license_plate": "FW123DB"
            "manufacturer": "manifattore",
            "model": "modello",
            "year": "2000",
            "image": img
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/cars

    + Body

            {
                "Auto salvata"
            }
            
+ Response 400 (application/json)

            {
                "Errore"
            }

+ Response 500 (application/json)

            {
                "Errore"
            }


## Remove cars [/api/cars/remove]

### Remove user's car [POST]

+ Request (application/json)

        {
            "_id": "3424243245234"
        }
        
+ Response 200 (application/json)

            {
                "Auto rimossa"
            }

+ Response 403 (application/json)

            {
                "Non puoi rimuovere questa automobile"
            }

## Club posts [/api/club_posts{?club}]

### List posts [GET]

Ritorna le macchine di un particolare utente

+ Response 200 (application/json)

        [
            {
                "club": "clubName",
                "author": "fadsf",
                "title": "belkla",
                "description": "bel post",
                "image": img
            }
        ]
+ Response 403 (application/json)

        {
            "Non risulti iscritto al club"
        }
+ Response 404 (application/json)

        {
            "Nessun post trovato"
        }


### Add a new post [POST]

Aggiunge un nuovo post ad un club

+ Request (application/json)

        {
            "club": "clubName",
            "author": "fadsf",
            "title": "belkla",
            "description": "bel post",
            "image": img
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/club_posts

    + Body

            {
                "Post successfully created"
            }
            
+ Response 403 (application/json)

            {
                "Non sei iscritto al club"
            }


## Remove post [/api/club_posts/remove_post]

### Remove user's post from club [POST]

+ Request (application/json)

        {
            "post_id": "3424243245234"
        }
        
+ Response 200 (application/json)

            {
                "Post eliminato"
            }

+ Response 404 (application/json)

            {
                "Errore"
            }
+ Response 500 (application/json)

            {
                "Errore"
            }